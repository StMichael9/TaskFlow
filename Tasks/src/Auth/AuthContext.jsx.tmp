// src/Auth/AuthContext.jsx
import React, { createContext, useContext, useState, useEffect } from "react";
import BACKEND_URL from "../utils/apiConfig";

const AuthContext = createContext();

// Use the centralized API config
const API = BACKEND_URL;

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);

  // 1️⃣ On mount (or after login/signup), load current user from the cookie or token
  const loadUser = async () => {
    try {
      // Try to get token from localStorage as a fallback
      const token = localStorage.getItem('authToken');
      const headers = token ? { 'Authorization': `Bearer ${token}` } : {};
      
      const res = await fetch(`${API}/auth/me`, {
        credentials: "include", // send HttpOnly cookie
        headers: headers
      });
      
      if (!res.ok) throw new Error("Not authenticated");
      const { user } = await res.json();
      setUser(user);
    } catch (error) {
      console.error("Authentication error:", error);
      setUser(null);
    }
  };

  useEffect(() => {
    loadUser();
  }, []);

  // 2️⃣ signup: POST /auth/signup → sets cookie on server, then reload user
  const signup = async ({ email, username, password }) => {
    try {
      const res = await fetch(`${API}/auth/signup`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, username, password }),
      });
      
      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.message || "Signup failed");
      }
      
      // If we get a token in the response, store it as fallback
      try {
        const data = await res.json();
        if (data && data.token) {
          localStorage.setItem('authToken', data.token);
        }
      } catch (e) {
        // Response body might have already been consumed or isn't JSON
      }
      
      await loadUser();
    } catch (error) {
      console.error("Signup error:", error);
      throw error;
    }
  };

  // 3️⃣ login: POST /auth/login → sets cookie on server, then reload user
  const login = async ({ username, password }) => {
    try {
      const res = await fetch(`${API}/auth/login`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });
      
      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.message || "Login failed");
      }
      
      // If we get a token in the response, store it as fallback
      try {
        const data = await res.json();
        if (data && data.token) {
          localStorage.setItem('authToken', data.token);
        }
      } catch (e) {
        // Response body might have already been consumed or isn't JSON
      }
      
      await loadUser();
    } catch (error) {
      console.error("Login error:", error);
      throw error;
    }
  };

  // 4️⃣ logout: POST /auth/logout → clears cookie, then clear client state
  const logout = async () => {
    await fetch(`${API}/auth/logout`, {
      method: "POST",
      credentials: "include",
    });
    localStorage.removeItem('authToken');
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, signup, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => useContext(AuthContext);
